# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-05-16 00:54
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=128)),
                ('introduction', models.CharField(max_length=512, null=True)),
                ('source', models.CharField(max_length=256, null=True)),
                ('author', models.CharField(max_length=64, null=True)),
                ('number_problem', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='CategoryProblemRelation',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('directory', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=128), size=None)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problem_relations', to='rest_api.Category')),
            ],
        ),
        migrations.CreateModel(
            name='CourseGroupRelation',
            fields=[
                ('creator', models.CharField(max_length=150, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('updater', models.CharField(max_length=150, null=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('available', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CourseGroupTeacherRelation',
            fields=[
                ('creator', models.CharField(max_length=150, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('updater', models.CharField(max_length=150, null=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('available', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CourseMeta',
            fields=[
                ('creator', models.CharField(max_length=150, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('updater', models.CharField(max_length=150, null=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('available', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('caption', models.CharField(max_length=150)),
                ('number_courses', models.IntegerField(default=0)),
                ('number_course_groups', models.IntegerField(default=0)),
                ('number_categories', models.IntegerField(default=0)),
                ('number_problems', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CourseMetaCategoryRelation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_meta_relations', to='rest_api.Category')),
                ('course_meta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category_relations', to='rest_api.CourseMeta')),
            ],
        ),
        migrations.CreateModel(
            name='CourseStudentRelation',
            fields=[
                ('creator', models.CharField(max_length=150, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('updater', models.CharField(max_length=150, null=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('available', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CourseTeacherRelation',
            fields=[
                ('creator', models.CharField(max_length=150, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('updater', models.CharField(max_length=150, null=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('available', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CourseUnit',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('GROUP', 'GROUP'), ('COURSE', 'COURSE')], max_length=8)),
            ],
        ),
        migrations.CreateModel(
            name='EduAdmin',
            fields=[
                ('creator', models.CharField(max_length=150, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('updater', models.CharField(max_length=150, null=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('available', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('name', models.CharField(max_length=150)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Environment',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Limit',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('env_name', models.CharField(max_length=128)),
                ('time_limit', models.IntegerField(default=-1)),
                ('memory_limit', models.IntegerField(default=-1)),
                ('length_limit', models.IntegerField(default=-1)),
                ('environment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='limits', to='rest_api.Environment')),
            ],
        ),
        migrations.CreateModel(
            name='Mission',
            fields=[
                ('creator', models.CharField(max_length=150, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('updater', models.CharField(max_length=150, null=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('available', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('course_meta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='missions', to='rest_api.CourseMeta')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MissionGroup',
            fields=[
                ('creator', models.CharField(max_length=150, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('updater', models.CharField(max_length=150, null=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('available', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('course_meta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mission_groups', to='rest_api.CourseMeta')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MissionGroupRelation',
            fields=[
                ('creator', models.CharField(max_length=150, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('updater', models.CharField(max_length=150, null=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('available', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('mission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_relations', to='rest_api.Mission')),
                ('mission_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mission_relations', to='rest_api.MissionGroup')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MissionProblemRelation',
            fields=[
                ('creator', models.CharField(max_length=150, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('updater', models.CharField(max_length=150, null=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('available', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('mission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problem_relations', to='rest_api.Mission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('creator', models.CharField(max_length=150, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('updater', models.CharField(max_length=150, null=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('available', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('caption', models.CharField(max_length=150)),
                ('introduction', models.TextField(max_length=1024, null=True)),
                ('number_organizations', models.IntegerField(default=0)),
                ('number_students', models.IntegerField(default=0)),
                ('number_teachers', models.IntegerField(default=0)),
                ('number_admins', models.IntegerField(default=0)),
                ('number_course_meta', models.IntegerField(default=0)),
                ('number_courses', models.IntegerField(default=0)),
                ('number_course_groups', models.IntegerField(default=0)),
                ('number_categories', models.IntegerField(default=0)),
                ('number_problems', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganizationCategoryRelation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organization_relations', to='rest_api.Category')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category_relations', to='rest_api.Organization')),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('description', models.TextField()),
                ('sample', models.TextField()),
                ('create_time', models.DateTimeField()),
                ('update_time', models.DateTimeField()),
                ('title', models.CharField(max_length=128)),
                ('introduction', models.CharField(max_length=512, null=True)),
                ('source', models.CharField(max_length=256, null=True)),
                ('author', models.CharField(max_length=64, null=True)),
                ('is_special_judge', models.BooleanField()),
                ('number_test_data', models.IntegerField()),
                ('number_limit', models.IntegerField()),
                ('number_category', models.IntegerField()),
                ('number_invalid_word', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('creator', models.CharField(max_length=150, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('updater', models.CharField(max_length=150, null=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('available', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('name', models.CharField(max_length=150)),
                ('student_id', models.CharField(max_length=32)),
                ('major', models.CharField(max_length=128, null=True)),
                ('grade', models.CharField(max_length=32, null=True)),
                ('class_in', models.CharField(max_length=128, null=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='rest_api.Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('sid', models.BigIntegerField(unique=True)),
                ('time', models.IntegerField(default=-1)),
                ('memory', models.IntegerField(default=-1)),
                ('length', models.IntegerField(default=-1)),
                ('status', models.CharField(choices=[('PD', 'Pending'), ('PDR', 'Pending Rejudge'), ('CP', 'Compiling'), ('CE', 'Compile Error'), ('CD', 'Compile Done'), ('RJ', 'Running & Judging'), ('RN', 'Running'), ('RE', 'Runtime Error'), ('TLE', 'Time Limit Exceed'), ('MLE', 'Memory Limit Exceed'), ('OLE', 'Output Limit Exceed'), ('RD', 'Running Done'), ('JD', 'Judging'), ('WA', 'Wrong Answer'), ('PE', 'Presentation Error'), ('AC', 'Accepted')], default='PD', max_length=4)),
                ('finished', models.BooleanField(default=False)),
                ('submit_time', models.DateTimeField()),
                ('update_time', models.DateTimeField()),
                ('ip', models.GenericIPAddressField()),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('creator', models.CharField(max_length=150, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('updater', models.CharField(max_length=150, null=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('available', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('name', models.CharField(max_length=150)),
                ('teacher_id', models.CharField(max_length=32)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teachers', to='rest_api.Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('creator', models.CharField(max_length=150, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('updater', models.CharField(max_length=150, null=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('available', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('name', models.CharField(max_length=150, null=True)),
                ('sex', models.CharField(default='SECRET', max_length=8)),
                ('phone', models.CharField(max_length=32, null=True)),
                ('email', models.EmailField(max_length=128, null=True)),
                ('github', models.CharField(max_length=128, null=True)),
                ('qq', models.CharField(max_length=128, null=True)),
                ('wechat', models.CharField(max_length=128, null=True)),
                ('blog', models.CharField(max_length=128, null=True)),
                ('introduction', models.TextField(max_length=256, null=True)),
                ('last_login', models.DateTimeField(null=True)),
                ('ip', models.GenericIPAddressField(null=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('identities', django.contrib.postgres.fields.jsonb.JSONField(default={})),
                ('courses', django.contrib.postgres.fields.jsonb.JSONField(default={})),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompileInfo',
            fields=[
                ('submission', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='compile_info', serialize=False, to='rest_api.Submission')),
                ('info', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('creator', models.CharField(max_length=150, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('updater', models.CharField(max_length=150, null=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('available', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
                ('course_unit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='course', serialize=False, to='rest_api.CourseUnit')),
                ('cid', models.BigIntegerField(unique=True)),
                ('caption', models.CharField(max_length=256)),
                ('introduction', models.TextField(max_length=1024, null=True)),
                ('start_time', models.DateField()),
                ('end_time', models.DateField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CourseGroup',
            fields=[
                ('creator', models.CharField(max_length=150, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('updater', models.CharField(max_length=150, null=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('available', models.BooleanField(default=True)),
                ('deleted', models.BooleanField(default=False)),
                ('course_unit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='course_group', serialize=False, to='rest_api.CourseUnit')),
                ('gid', models.BigIntegerField(unique=True)),
                ('caption', models.CharField(max_length=256)),
                ('introduction', models.TextField(max_length=1024, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubmissionCode',
            fields=[
                ('submission', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='code', serialize=False, to='rest_api.Submission')),
                ('code', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='TestDataStatus',
            fields=[
                ('submission', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='test_data_status', serialize=False, to='rest_api.Submission')),
                ('status', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
        ),
        migrations.AddField(
            model_name='teacher',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_identities', to='rest_api.UserProfile'),
        ),
        migrations.AddField(
            model_name='teacher',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_identities', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='submission',
            name='environment',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submissions', to='rest_api.Environment'),
        ),
        migrations.AddField(
            model_name='submission',
            name='mission',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submissions', to='rest_api.Mission'),
        ),
        migrations.AddField(
            model_name='submission',
            name='organization',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submissions', to='rest_api.Organization'),
        ),
        migrations.AddField(
            model_name='submission',
            name='problem',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submissions', to='rest_api.Problem'),
        ),
        migrations.AddField(
            model_name='submission',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submissions', to='rest_api.UserProfile'),
        ),
        migrations.AddField(
            model_name='student',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_identities', to='rest_api.UserProfile'),
        ),
        migrations.AddField(
            model_name='student',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_identities', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='organization',
            name='categories',
            field=models.ManyToManyField(related_name='organizations', through='rest_api.OrganizationCategoryRelation', to='rest_api.Category'),
        ),
        migrations.AddField(
            model_name='organization',
            name='parent',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='rest_api.Organization', to_field='name'),
        ),
        migrations.AddField(
            model_name='missionproblemrelation',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mission_relations', to='rest_api.Problem'),
        ),
        migrations.AddField(
            model_name='missiongroup',
            name='course_unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mission_groups', to='rest_api.CourseUnit'),
        ),
        migrations.AddField(
            model_name='missiongroup',
            name='missions',
            field=models.ManyToManyField(related_name='groups', through='rest_api.MissionGroupRelation', to='rest_api.Mission'),
        ),
        migrations.AddField(
            model_name='missiongroup',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mission_groups', to='rest_api.Organization'),
        ),
        migrations.AddField(
            model_name='mission',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='missions', to='rest_api.Organization'),
        ),
        migrations.AddField(
            model_name='mission',
            name='problems',
            field=models.ManyToManyField(related_name='missions', through='rest_api.MissionProblemRelation', to='rest_api.Problem'),
        ),
        migrations.AddField(
            model_name='limit',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='limits', to='rest_api.Problem'),
        ),
        migrations.AddField(
            model_name='eduadmin',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='edu_admins', to='rest_api.Organization'),
        ),
        migrations.AddField(
            model_name='eduadmin',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='edu_admin_identities', to='rest_api.UserProfile'),
        ),
        migrations.AddField(
            model_name='eduadmin',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='edu_admin_identities', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='courseteacherrelation',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_relations', to='rest_api.Teacher'),
        ),
        migrations.AddField(
            model_name='coursestudentrelation',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_relations', to='rest_api.Student'),
        ),
        migrations.AddField(
            model_name='coursemetacategoryrelation',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_meta_category_relations', to='rest_api.Organization'),
        ),
        migrations.AddField(
            model_name='coursemeta',
            name='categories',
            field=models.ManyToManyField(related_name='course_meta', through='rest_api.CourseMetaCategoryRelation', to='rest_api.Category'),
        ),
        migrations.AddField(
            model_name='coursemeta',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_meta', to='rest_api.Organization', to_field='name'),
        ),
        migrations.AddField(
            model_name='coursegroupteacherrelation',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_group_relations', to='rest_api.Teacher'),
        ),
        migrations.AddField(
            model_name='categoryproblemrelation',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category_relations', to='rest_api.Problem'),
        ),
        migrations.AddField(
            model_name='category',
            name='problems',
            field=models.ManyToManyField(related_name='categories', through='rest_api.CategoryProblemRelation', to='rest_api.Problem'),
        ),
        migrations.AddField(
            model_name='courseteacherrelation',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_relations', to='rest_api.Course', to_field='cid'),
        ),
        migrations.AddField(
            model_name='coursestudentrelation',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_relations', to='rest_api.Course', to_field='cid'),
        ),
        migrations.AddField(
            model_name='coursegroupteacherrelation',
            name='course_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_relations', to='rest_api.CourseGroup', to_field='gid'),
        ),
        migrations.AddField(
            model_name='coursegrouprelation',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_group_relations', to='rest_api.Course', to_field='cid'),
        ),
        migrations.AddField(
            model_name='coursegrouprelation',
            name='course_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_relations', to='rest_api.CourseGroup', to_field='gid'),
        ),
        migrations.AddField(
            model_name='coursegroup',
            name='courses',
            field=models.ManyToManyField(related_name='course_groups', through='rest_api.CourseGroupRelation', to='rest_api.Course'),
        ),
        migrations.AddField(
            model_name='coursegroup',
            name='meta',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_groups', to='rest_api.CourseMeta'),
        ),
        migrations.AddField(
            model_name='coursegroup',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_groups', to='rest_api.Organization', to_field='name'),
        ),
        migrations.AddField(
            model_name='coursegroup',
            name='teachers',
            field=models.ManyToManyField(related_name='course_groups', through='rest_api.CourseGroupTeacherRelation', to='rest_api.Teacher'),
        ),
        migrations.AddField(
            model_name='course',
            name='meta',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='rest_api.CourseMeta'),
        ),
        migrations.AddField(
            model_name='course',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='rest_api.Organization', to_field='name'),
        ),
        migrations.AddField(
            model_name='course',
            name='students',
            field=models.ManyToManyField(related_name='courses', through='rest_api.CourseStudentRelation', to='rest_api.Student'),
        ),
        migrations.AddField(
            model_name='course',
            name='teachers',
            field=models.ManyToManyField(related_name='courses', through='rest_api.CourseTeacherRelation', to='rest_api.Teacher'),
        ),
    ]
